<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ru-RU">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch002.xhtml</title>
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
        color: #aaaaaa;
      }
    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
    div.sourceCode
      {   }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span.al { color: #ff0000; font-weight: bold; } /* Alert */
    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
    code span.at { color: #7d9029; } /* Attribute */
    code span.bn { color: #40a070; } /* BaseN */
    code span.bu { } /* BuiltIn */
    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #4070a0; } /* Char */
    code span.cn { color: #880000; } /* Constant */
    code span.co { color: #60a0b0; font-style: italic; } /* Comment */
    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
    code span.do { color: #ba2121; font-style: italic; } /* Documentation */
    code span.dt { color: #902000; } /* DataType */
    code span.dv { color: #40a070; } /* DecVal */
    code span.er { color: #ff0000; font-weight: bold; } /* Error */
    code span.ex { } /* Extension */
    code span.fl { color: #40a070; } /* Float */
    code span.fu { color: #06287e; } /* Function */
    code span.im { } /* Import */
    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
    code span.kw { color: #007020; font-weight: bold; } /* Keyword */
    code span.op { color: #666666; } /* Operator */
    code span.ot { color: #007020; } /* Other */
    code span.pp { color: #bc7a00; } /* Preprocessor */
    code span.sc { color: #4070a0; } /* SpecialChar */
    code span.ss { color: #bb6688; } /* SpecialString */
    code span.st { color: #4070a0; } /* String */
    code span.va { color: #19177c; } /* Variable */
    code span.vs { color: #4070a0; } /* VerbatimString */
    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body epub:type="bodymatter">
<section id="декомпозиция" class="level1" data-number="2">
<h1 data-number="2">2. Декомпозиция</h1>
<div class="text-container text-container--module">
<p>Разберём выделение компонентов и научимся работать с токенами</p>
</div>
<section id="от-страниц-к-компонентам" class="level2" data-number="2.1">
<h2 data-number="2.1">2.1. От страниц к компонентам</h2>
<div class="text-container text-container--module">
<figure>
<img src="../media/file46.png" alt="Веб-страница о веб-странице" />
<figcaption aria-hidden="true">Веб-страница о веб-странице</figcaption>
</figure>
<p>Мы воспринимаем всё в интернете «страницами». Такую метафору придумали при создании интернета, и она прочно закрепилась в восприятии. Она помогает ориентироваться в происходящем и при этом имеет сильную связь с реальным объектом, знакомым каждому. Сайт легко представить как набор связанных друг с другом бумажных листочков, между которыми перемещается наблюдатель. Очень приземлённая к реальности метафора для такой абстрактной вещи, как информация. Однако именно эта метафора может сильно искажать восприятие того, как работает интернет в наше время.</p>
<p>Может ли разработчик оценить, сколько времени понадобится, чтобы сделать сайт на 300 страниц? Нет, потому что нужны подробности. Делать 300 уникальных по структуре страниц — это одно, а сделать главную для каталога, какой бы она ни была, и 299 однотипных страниц товаров — другое.</p>
<p>С эволюцией интернет-технологий мы научились выделять и переиспользовать повторяющиеся компоненты в коде, даже если в итоге они будут лежать на разных «страницах». С развитием инструментов мы получили возможность относительно легко повторять этот подход в дизайне.</p>
<p>Создание дизайн-системы требует умения видеть повторения в интерфейсе, фиксировать их в документации или UI-ките и переиспользовать. Не надо начинать строить систему с одной страницы дизайна, ведь один и тот же элемент может иметь разные модификации в зависимости от окружения и сценария использования. Лучше сразу понимать, какие возможные модификации могут быть. Без исходных данных придётся фантазировать, и есть шанс сделать лишнюю работу.</p>
<section id="типы-компонентов" class="level3" data-number="2.1.1">
<h3 data-number="2.1.1">Типы компонентов</h3>
<p>В предыдущем разделе мы упоминали, что интерфейс можно разбирать, как матрёшку, и привели в пример методологию <a href="https://atomicdesign.bradfrost.com/chapter-2/">Atomic Design</a>. Давайте быстро пройдёмся по её классификации.</p>
<figure>
<img src="../media/file47.png" alt="Схема принципов атомарного дизайна" />
<figcaption aria-hidden="true">Схема принципов атомарного дизайна</figcaption>
</figure>
<p>Нас интересуют первые три сущности.</p>
<p><strong>Атомы</strong> — простейшие элементы интерфейса, которые чаще всего бесполезны сами по себе. Это базовые графические элементы, из которых строится всё остальное. В оригинальной методологии к атомам относят ещё и отдельные повторяющиеся свойства, например: цвета, стили текста, скругления. Мы же будем выделять их в отдельную категорию — токены.</p>
<figure>
<img src="../media/file48.png" alt="Токены — свойства или группы свойств" />
<figcaption aria-hidden="true">Токены — свойства или группы свойств</figcaption>
</figure>
<figure>
<img src="../media/file49.png" alt="Поле ввода, коробочка чекбокса, иконка — атомы, их видно в макете" />
<figcaption aria-hidden="true">Поле ввода, коробочка чекбокса, иконка — атомы, их видно в макете</figcaption>
</figure>
<p><strong>Молекулы</strong> — совокупность нескольких атомов. Универсальные компоненты, которые не несут продуктового контекста, поэтому их можно использовать в любом сценарии и на любом экране. Они про функцию, а не про смысл.</p>
<figure>
<img src="../media/file50.png" alt="Молекула-Input состоит из атомов. Здесь атомы — коробочка поля ввода, текст-плейсхолдер, текст-подпись, текст-комментарий под полем. Молекула не знает ничего про сценарий, она просто принимает и обрабатывает текст." />
<figcaption aria-hidden="true">Молекула-Input состоит из атомов. Здесь атомы — коробочка поля ввода, текст-плейсхолдер, текст-подпись, текст-комментарий под полем. Молекула не знает ничего про сценарий, она просто принимает и обрабатывает текст.</figcaption>
</figure>
<p><strong>Организмы</strong> — совокупность молекул, которая несёт в себе продуктовый смысл и чаще всего зависима от контекста. Организмы можно переиспользовать, но не всегда. Часто в дизайн-системах их называют «паттерны».</p>
<figure>
<img src="../media/file51.png" alt="Форма логина может появляться в разных местах, но задача у неё всегда одна" />
<figcaption aria-hidden="true">Форма логина может появляться в разных местах, но задача у неё всегда одна</figcaption>
</figure>
<p><strong>Шаблоны</strong> состоят из организмов и молекул и описывают структуру. Те самые 299 однотипных страниц товара вполне могут генерироваться из одного шаблона. Структура у них одна и та же, меняются только данные. Про страницы мы уже поговорили в самом начале — это конечный результат. То, что мы видим в интернете. Шаблоны могут выноситься в дизайн-систему в виде описания возможного лейаута. Страницы в дизайн-систему не выносятся.</p>
<p>Atomic полезен на старте создания дизайн-системы как база, чтобы управлять хаосом и быстрым ростом количества токенов или компонентов. После нескольких итераций могут выкристаллизоваться собственные принципы, не бойтесь применять их и выбрасывать старые.</p>
<p>Итак, у нас есть набор страниц. Всё, что нам нужно сделать — внимательно на них посмотреть и последовательно выделить все компоненты: токены, атомы, молекулы, организмы, шаблоны. Выделить, выписать и дополнить в случае необходимости.</p>
</section>
</div>
</section>
<section id="введение-в-токены" class="level2" data-number="2.2">
<h2 data-number="2.2">2.2. Введение в токены</h2>
<div class="text-container text-container--module">
<p>Токены — свойства, которые вынесены в переменные. Это позволяет сделать их общими для всей системы. Если какое-то свойство объекта повторяется больше одного раза, стоит задуматься, можно ли его вынести в токен.</p>
<p>Мы рассмотрим популярные категории:</p>
<ul>
<li>текстовые стили,</li>
<li>цвета,</li>
<li>скругления,</li>
<li>эффекты,</li>
<li>отступы.</li>
</ul>
<p>Также в токены можно выделять любые другие свойства или группы свойств: прозрачности, анимации, размеры.</p>
<p>Выделять закономерности можно двумя способами:</p>
<ul>
<li>сравнивая свойства друг с другом, без привязки к применению в макете;</li>
<li>семантически, с привязкой к способу использования.</li>
</ul>
<p>Подход прежде всего влияет на название токена, поэтому дальше мы будем говорить про сравнительное или семантическое именование. Но на самом деле разница не только в имени, но и подходе к систематизации в целом.</p>
<p>Сравнительное именование даёт больше свободы. Семантическое накладывает ограничения, но позволяет держать продукт более консистентным, облегчает погружение новых членов команды разработки в проект. Встречаются и смешанные подходы.</p>
<section id="следующий-уровень" class="level3" data-number="2.2.1">
<h3 data-number="2.2.1">Следующий уровень</h3>
<p>Некоторые дизайн-системы идут ещё дальше и создают не только переменные для базовых параметров, но и целые подменяемые config-файлы:</p>
<figure>
<img src="../media/file52.png" alt="Вместо разных типов кнопок теперь можно просто подставлять разные конфиг-файлы" />
<figcaption aria-hidden="true">Вместо разных типов кнопок теперь можно просто подставлять разные конфиг-файлы</figcaption>
</figure>
<p>Это полезно, когда нужно синхронизировать между собой несколько платформ. Существуют отдельные сервисы, которые позволяют генерировать файлы и автоматически переводить их на язык нужной платформы. Таким образом, заметно сокращаются усилия при синхронизации между командами.</p>
<p>Про это <a href="https://www.youtube.com/watch?v=bm3EZNT7nqI">говорил Юра Ветров</a> — директор по дизайну <a href="http://Mail.ru">Mail.ru</a>.</p>
</section>
</div>
</section>
<section id="сравнение-или-семантика" class="level2" data-number="2.3">
<h2 data-number="2.3">2.3. Сравнение или семантика</h2>
<div class="text-container text-container--module">
<p>Поговорим о том, как систематизируют токены в разных дизайн-системах.</p>
<section id="текст" class="level3" data-number="2.3.1">
<h3 data-number="2.3.1">Текст</h3>
<p>Оговоримся, что под текстом мы имеем в виду сочетание нескольких параметров. Стандартно нас интересуют параметры <code>font-family</code>, <code>font-weight</code>, <code>line-height</code> и <code>letter-spacing</code>, но возможны и другие модификации, например, <code>text-transform</code>. Нужно общаться с дизайнером.</p>
<p>К тексту подходы могут быть разные.</p>
<figure>
<img src="../media/file53.png" alt="Типографика дизайн-системы Consta" />
<figcaption aria-hidden="true">Типографика <a href="https://www.figma.com/@consta">дизайн-системы Consta</a></figcaption>
</figure>
<p>Consta разбивает стиль по параметрам и использует <strong>сравнительное</strong> именование. Отсюда понятно, что «L» будет больше, чем «M», но какой из них использовать, чтобы написать заголовок на странице, решает дизайнер. Это продиктовано тем, что одна дизайн-система используется для многих продуктов компании. Когда дизайнер начинает работать над новым проектом, он составляет группы свойств и определяет их семантически для своего продукта.</p>
<figure>
<img src="../media/file54.png" alt="Типографика дизайн-системы Aviasales" />
<figcaption aria-hidden="true">Типографика дизайн-системы Aviasales</figcaption>
</figure>
<p>Дизайн-система Aviasales использует <strong>семантический</strong> подход к именованию текстовых стилей. Здесь система заточена под конкретный продукт, поэтому важно оставаться консистентными и не давать лишней свободы в оформлении.</p>
</section>
<section id="цвета" class="level3" data-number="2.3.2">
<h3 data-number="2.3.2">Цвета</h3>
<p>В цветах нас интересует, во-первых, сам цвет, а во-вторых, его альфа-канал. Кто-то выносит сразу в токен, кто-то разрешает «навешивать» сверху. Первый подход даёт больше консистентности, второй — больше гибкости.</p>
<p>Поговорим о способах систематизации.</p>
<figure>
<img src="../media/file55.png" alt="Сравнительная палитра" />
<figcaption aria-hidden="true">Сравнительная палитра</figcaption>
</figure>
<p>Сравнительный подход здесь — это палитры. Они дают гибкость в решениях, что может быть важно для продуктов, у которых дизайн — ценность для пользователя. Но чем больше цветов, тем сложнее ориентироваться в их многообразии. С ростом дизайн-команды сложно ещё и синхронизировать понимание, что во что красить. А с приходом тёмной темы работа с одной лишь базовой палитрой превращается в ад.</p>
<figure>
<img src="../media/file56.png" alt="Семантические токены дизайн-системы Mail.ru Group" />
<figcaption aria-hidden="true">Семантические токены <a href="https://www.figma.com/@paradigm">дизайн-системы Mail.ru Group</a></figcaption>
</figure>
<p>Семантический подход может быть особенно актуален в цветах, потому цветов обычно больше, чем текстовых стилей, а их восприятие куда субъективнее. Его минус в том, что могут появляться дубли цвета. Например, акцентный цвет может совпадать с цветом ссылок, и тогда у вас будет два токена с одинаковым значением. Если этого не сделать, то когда вы захотите перекрасить все ссылки, придётся рефакторить половину проекта.</p>
<p>Чем меньше семантических цветов, тем строже ограничения для дизайна. Чем больше, тем гибче и ярче можно сделать визуал, но сложнее ориентироваться в стилях и токенах:</p>
<figure>
<img src="../media/file57.png" alt="Все цвета из светлой темы дизайн-системы VK" />
<figcaption aria-hidden="true">Все цвета из светлой темы <a href="https://www.figma.com/@vk">дизайн-системы VK</a></figcaption>
</figure>
<p>Бывает и смешанный вариант. Тогда из базовой палитры 50-100-200-х цветов собираются семантические токены. Полезно для создания тёмной темы. На момент написания этого курса VK делает именно так.</p>
</section>
<section id="вычисление-цветов" class="level3" data-number="2.3.3">
<h3 data-number="2.3.3">Вычисление цветов</h3>
<figure>
<img src="../media/file58.png" alt="Accessible Palette помогает составить палитру, отвечающую требованиям по доступности" />
<figcaption aria-hidden="true"><a href="https://accessiblepalette.com/">Accessible Palette</a> помогает составить палитру, отвечающую требованиям по доступности</figcaption>
</figure>
<p>Иногда цвета в палитрах подчиняют какой-то математике. Например, задают базовые цвета, а алгоритм высчитывает его вариации. Это могут быть как внешние сервисы, как Accessible Palette, так и алгоритм внутри дизайн-системы. Это хороший способ сократить количество человеческих усилий для обновления палитры, заодно уменьшив количество ошибок.</p>
</section>
<section id="скругления" class="level3" data-number="2.3.4">
<h3 data-number="2.3.4">Скругления</h3>
<figure>
<img src="../media/file59.png" alt="Сравнительный подход к скруглениям в SEMRUSH" />
<figcaption aria-hidden="true">Сравнительный подход к скруглениям в <a href="https://i.semrush.com/style/variables/#aea1ff">SEMRUSH</a></figcaption>
</figure>
<p>На момент написания этого текста скругления нельзя вынести в стили Фигмы, что сильно затрудняет работу с ними как с токенами в дизайне. Чтобы не усложнять лишний раз общение с разработчиками, придумывать сложную семантическую модель для них не стоит.</p>
<p>Основная задача здесь — ограничить набор радиусов, примерно определить область использования (обычно в форме руководства) и придерживаться этих правил при разработке новых компонентов.</p>
<p>В целом со скруглениями всё довольно просто до тех пор, пока кто-то не заговорит <a href="https://ux.pub/zakruglennye-ugly-v-ekosisteme-apple-superellips/">про суперэллипсы</a>.</p>
</section>
<section id="эффекты" class="level3" data-number="2.3.5">
<h3 data-number="2.3.5">Эффекты</h3>
<p>Если мы говорим о тенях, то сравнительная систематизация здесь может базироваться на «маечной маркировке» (xs-s-m-l-xl…). Чем больше тень, тем больше её «размер».</p>
<figure>
<img src="../media/file60.png" alt="Из руководства по Material Design" />
<figcaption aria-hidden="true">Из руководства по Material Design</figcaption>
</figure>
<p>Интересный подход к сравнительной систематизации теней — <a href="https://material.io/design/environment/elevation.html#elevation-in-material-design">elevation из дизайн-системы Google</a>. Он базируется на физике реального мира. Тени определяются числом, отражающим высоту над базовой поверхностью.</p>
<p>Такая система удобна для понимания, но в ней есть свои нюансы и дополнительные условности. Допустим, мы поднимем поверхность на 4dp, а над ней — кнопку на высоту 6dp. Тогда кнопка будет отбрасывать тень, аналогичную 2dp, ведь поверхность под ней выше базовой. Эта дополнительная математика автоматизирована внутри Андроида, но требует дополнительного внимания дизайнера.</p>
<p>Семантика будет строиться на способе применения. Этот подход более популярный, так как позволяет сразу определить количество «слоёв» интерфейса, не «раздувать» и не смешивать их в дальнейшем.</p>
<figure>
<img src="../media/file61.png" alt="Семантические тени в дизайн-системе Consta" />
<figcaption aria-hidden="true">Семантические тени в дизайн-системе Consta</figcaption>
</figure>
</section>
<section id="отступы" class="level3" data-number="2.3.6">
<h3 data-number="2.3.6">Отступы</h3>
<p>В стандартизации отступов лучше пойти через поиск закономерностей. Посмотрите, есть ли какой-то модуль, которому кратны отступы между блоками. Если нет, придумайте этот модуль.</p>
<p>Чаще всего отступы строят вокруг <code>8px</code> (<a href="https://guides.kontur.ru/principles/grid/">так делает «Контур»</a>), иногда — <code>4px</code> (<a href="https://design.rt.ru/basics/grid/module">как у «Ростелекома»</a>). Небольшие проекты иногда собирают с модулем <code>5px</code>, чтобы было удобнее работать с круглыми цифрами.</p>
<figure>
<img src="../media/file62.png" alt="Отступы в дизайн-системе Consta" />
<figcaption aria-hidden="true">Отступы в дизайн-системе Consta</figcaption>
</figure>
<p><strong>Важно</strong>: человеческий глаз видит реальные границы, а не блоки вёрстки. Это рождает нюансы при восприятии отступов. Например, в следующем примере поле ввода и текстовый блок имеют одну и ту же высоту блоков, но визуально текст находится дальше от кнопки:</p>
<figure>
<img src="../media/file63.png" alt="Разница в отступах" />
<figcaption aria-hidden="true">Разница в отступах</figcaption>
</figure>
<p>Некоторые дизайн-системы учитывают это и кроме стандартной сетки отступов используют компенсаторы — небольшие отступы в 1-4px. Они могут не укладываться в общую модульную сетку и прокладываются внутри и между компонентами там, где нужно сделать расстояние визуально ровным.</p>
</section>
</div>
</section>
<section id="как-это-работает" class="level2" data-number="2.4">
<h2 data-number="2.4">2.4. Как это работает</h2>
<div class="text-container text-container--module">
<p>Чтобы говорить предметно, разберём в качестве примера сервис вишлистов MyWish. В чём смысл сервиса: пользователь Петя создаёт доску, на которой может сохранять свои пожелания, а затем отправляет на неё ссылку друзьям. Друзья видят, что хочет Петя, выбирают и отмечают, что смогут купить. После чего они спокойно идут в магазин, не тратя время на догадки, что подарить Пете на День рождения.</p>
<figure>
<img src="../media/file64.png" alt="Страница вишлиста, которой пользователь делится с друзьями" />
<figcaption aria-hidden="true">Страница вишлиста, которой пользователь делится с друзьями</figcaption>
</figure>
<figure>
<img src="../media/file65.png" alt="Страница желания, где друг бронирует подарок" />
<figcaption aria-hidden="true">Страница желания, где друг бронирует подарок</figcaption>
</figure>
<p>Рассмотрите макеты. Попробуйте отметить для себя закономерности по каждому из пунктов:</p>
<ul>
<li>текстовые стили,</li>
<li>цвета,</li>
<li>скругления,</li>
<li>эффекты,</li>
<li>отступы.</li>
</ul>
<p>При необходимости откройте Фигму, изучите отдельные элементы, а затем переходите дальше.</p>
<section id="текст-1" class="level3" data-number="2.4.1">
<h3 data-number="2.4.1">Текст</h3>
<p>Возьмём наш макет и выведем на артборд все повторяющиеся стили:</p>
<figure>
<img src="../media/file66.png" alt="Весь текст из демо-проекта" />
<figcaption aria-hidden="true">Весь текст из демо-проекта</figcaption>
</figure>
<p>В нашем случае мы договоримся, что работаем над дизайн-системой одного продукта и излишняя гибкость нам не нужна, поэтому используем семантический подход с небольшой примесью сравнительного.</p>
<p>Самый крупный текст используется для заголовков первого уровня. Других заголовочных стилей нет, поэтому пока мы их добавлять не будем.</p>
<p>Затем идут три стиля одинакового размера для основного текста, но с разной жирностью. Bold-версия используется для акцентов, regular-версия — для стандартного текста, вариант между ними нужен для того, чтобы писать цветным или белым (в нашем случае — на бейджах желаний).</p>
<p>Самый мелкий текст — текст подписей.</p>
<figure>
<img src="../media/file67.png" alt="Типографика MyWish" />
<figcaption aria-hidden="true">Типографика MyWish</figcaption>
</figure>
<p>Делать полную семантику значило бы поставить совсем жёсткие рамки. Например, Bold может использоваться внутри текстового блока, чтобы выделить важное, а может — для оформления заголовков. Поэтому мы оставили в стилях элемент сравнения (Bold-Medium-Regular). Довольно часто группы по применению называют семантически (Title, Body, Caption), а разные начертания внутри сравнивают друг с другом (Body Bold, Body Medium, Body Regular).</p>
</section>
<section id="цвета-1" class="level3" data-number="2.4.2">
<h3 data-number="2.4.2">Цвета</h3>
<p>Для нашего проекта используем чистую семантическую модель, «достанем» все цвета из макета с пометками об использовании. Чтобы упростить себе задачу, скопируйте макеты в Фигме в своё пространство и выделите нужный экран. В правой панели в разделе <em>Selection colors</em> можно посмотреть все цвета макета, выделить покрашенные ими элементы и посмотреть, как именно используется цвет.</p>
<figure>
<img src="../media/file68.gif" alt="Selection Colors в интерфейсе Фигмы" />
<figcaption aria-hidden="true">Selection Colors в интерфейсе Фигмы</figcaption>
</figure>
<p>Обратите внимание на акцентный фиолетовый и бледный серый. Если цвета похожи до степени смешения, полезно задать вопрос дизайнеру, не ошибка ли это. Для некоторых цветов действительно порой нужны чуть более тёмные или светлые версии — для разных задач. Но в нашем случае это ошибка. Сократим количество цветов.</p>
<figure>
<img src="../media/file69.png" alt="Оптимизированная палитра макета" />
<figcaption aria-hidden="true">Оптимизированная палитра макета</figcaption>
</figure>
<p>Повторим процедуру для второго экрана. На нём обнаружим дополнительный зелёный цвет для статусного текста. Выпишем все получившиеся цвета рядом со шрифтами:</p>
<figure>
<img src="../media/file70.png" alt="Токены в MyWish с текстом и цветами" />
<figcaption aria-hidden="true">Токены в MyWish с текстом и цветами</figcaption>
</figure>
</section>
<section id="скругления-1" class="level3" data-number="2.4.3">
<h3 data-number="2.4.3">Скругления</h3>
<p>Снова посмотрим на макет. В нём три типа скруглений: 6px у чекбокса, 16px у карточек и плашки на странице каталога, 50% для всех контролов:</p>
<figure>
<img src="../media/file71.png" alt="Скругления в макетах" />
<figcaption aria-hidden="true">Скругления в макетах</figcaption>
</figure>
<p>Мы могли бы ограничиться последними двумя и использовать 50% скругление для чекбокса, но тогда он превратится в радио и может путать пользователя. Функция элемента требует его «квадратности», поэтому оставляем три варианта. Добавляем их к нашему списку и заодно описываем правила:</p>
<figure>
<img src="../media/file72.png" alt="Скругления в MyWish" />
<figcaption aria-hidden="true">Скругления в MyWish</figcaption>
</figure>
</section>
<section id="эффекты-1" class="level3" data-number="2.4.4">
<h3 data-number="2.4.4">Эффекты</h3>
<p>Здесь к эффектам мы относим тени и размытия всех сортов. Ни то, ни другое в нашем макете не используется, сделаем соответствующую пометку:</p>
<figure>
<img src="../media/file73.png" alt="Эффекты в MyWish" />
<figcaption aria-hidden="true">Эффекты в MyWish</figcaption>
</figure>
</section>
<section id="отступы-1" class="level3" data-number="2.4.5">
<h3 data-number="2.4.5">Отступы</h3>
<p>Договоримся, что в нашем макете отступы будут кратны четырём. Форма представления может быть любой: можно завести базовый блок <code>spacer</code> в 4px и умножать его на нужное число или сделать маечную (xs-s-m-l) сетку. Отложим этот вопрос до момента обсуждения технической реализации, а пока сделаем пометку:</p>
<figure>
<img src="../media/file74.png" alt="Отступы в MyWish" />
<figcaption aria-hidden="true">Отступы в MyWish</figcaption>
</figure>
<p>У нас получился набор базовых правил, с помощью которых можно дальше строить и поддерживать дизайн-систему. Напомним, что в переменные можно выносить и другие вещи: прозрачность, анимации, размеры — что угодно. Здесь, как и во всём атомарном дизайне, полезно помнить правило:</p>
<blockquote>
<p>Как только вы используете элемент в интерфейсе второй раз, задумайтесь о том, можно ли его вынести в компонент.</p>
</blockquote>
<p>…или, если речь идёт о свойствах, в токен.</p>
</section>
</div>
</section>
<section id="задание-1.-выделение-токенов" class="level2" data-number="2.5">
<h2 data-number="2.5">2.5. Задание 1. Выделение токенов</h2>
<div class="text-container text-container--module">
<p>Для практики предлагаем вам поработать над элементами дизайн-системы сервиса OneDoc. Он позволяет просматривать сканы из внутреннего документооборота компании и подписывать их цифровой подписью.</p>
<p>Возьмите макеты из файла и выделите токены, как мы это делали выше. Скопируйте файл Фигмы себе в черновики и вынесите на отдельный артборд:</p>
<ul>
<li>текстовые стили,</li>
<li>цвета,</li>
<li>скругления,</li>
<li>эффекты,</li>
<li>отступы.</li>
</ul>
<p><em>Это курс на границе дизайна и кода!</em> Поэтому для выполнения задания нужно знать, как работать с Фигмой: создавать фреймы, копировать и перемещать элементы и выполнять другие действия. Мы добавили в дополнительные материалы первого модуля статьи по работе в Фигмой. Прочитайте их, если вам пока не доводилось использовать этот редактор.</p>
</div>
</section>
<section id="разбор-выделение-токенов" class="level2" data-number="2.6">
<h2 data-number="2.6">2.6. Разбор: выделение токенов</h2>
<div class="text-container text-container--module">
<p>Задание этого модуля не имеет единственно правильного ответа. Мы предлагаем одно из возможных решений. Сверьте его со своим и посмотрите различия.</p>
<figure>
<img src="../media/file75.png" alt="Токены сервиса подписания" />
<figcaption aria-hidden="true">Токены сервиса подписания</figcaption>
</figure>
<p><strong>Текстовых стилей</strong> получилось шесть. Из них два — заголовочных, три вариации основного текста разной жирности (одна из которых тоже используется как заголовок) и две вариации подписей для обычного текста, для цветных и белых подписей.</p>
<p>Паттерн, когда для белого и цветного текста используется шрифт чуть жирнее, можно встретить довольно часто. В первое время не всегда удаётся это сразу увидеть, поэтому обращайте внимание на такой момент.</p>
<p><strong>Цветовых групп</strong> получилось четыре. Это акцентные цвета, цвета разного текста, цвета для контролов, цвета фона и фоновых элементов.</p>
<p><strong>Скругления</strong> в этот раз используются только в одном варианте: на 6px. Можно было дополнительно описать, что они применяются ко всем интерактивным элементам и крупным карточкам.</p>
<p><strong>Тень</strong> в этот раз у нас используется для ховеров, зафиксируем и её тоже.</p>
<p><strong>Отступы</strong> также кратны четырём.</p>
</div>
</section>
<section id="промежуточный-тест-по-токенам" class="level2" data-number="2.7">
<h2 data-number="2.7">2.7. Промежуточный тест по токенам</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Что такое токен?</strong></li>
</ol>
<ul>
<li>Самый маленький неделимый объект в дизайн-системе. Например, чекбокс.</li>
<li>Общее свойство, вынесенное в глобальную переменную.</li>
<li>Любое свойство объекта в дизайн-системе.</li>
<li>Валюта для оплаты услуг дизайнера.</li>
</ul>
<ol start="2" type="1">
<li><strong>Что можно вынести в токены?</strong></li>
</ol>
<ul>
<li>Цвет текста.</li>
<li>Прозрачность карточки.</li>
<li>Анимацию появления выпадающего элемента.</li>
<li>Тень при ховере на элементах управления.</li>
<li>Скругления объектов в дизайне.</li>
<li>Надписи на кнопках.</li>
<li>Иконки.</li>
<li>Отступы в макете.</li>
</ul>
<ol start="3" type="1">
<li><strong>Если свойства формируются и называются так, чтобы была понятна разница между ними, но при этом не отражается контекст использования, это…</strong></li>
</ol>
<ul>
<li>Сравнительный подход.</li>
<li>Семантический подход.</li>
</ul>
<ol start="4" type="1">
<li><strong>Если мы сознательно избегаем упоминания в имени свойства его значения, а ориентируемся только на то, как оно используется, это…</strong></li>
</ol>
<ul>
<li>Сравнительный подход.</li>
<li>Семантический подход.</li>
</ul>
<ol start="5" type="1">
<li><strong>Верно ли, что сравнительный подход — плохой паттерн, так нельзя делать в дизайн-системах?</strong></li>
</ol>
<ul>
<li>Верно.</li>
<li>Неверно.</li>
</ul>
<ol start="6" type="1">
<li><strong>Можно ли использовать только сравнительный подход в цветах?</strong></li>
</ol>
<ul>
<li>Иногда можно.</li>
<li>Нельзя.</li>
</ul>
</div>
</section>
<section id="промежуточный-тест-по-токенам-ответы" class="level2" data-number="2.8">
<h2 data-number="2.8">2.7. Промежуточный тест по токенам (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Что такое токен?</strong></li>
</ol>
<ul>
<li>Общее свойство, вынесенное в глобальную переменную.</li>
</ul>
<ol start="2" type="1">
<li><strong>Что можно вынести в токены?</strong></li>
</ol>
<ul>
<li>Цвет текста.</li>
<li>Прозрачность карточки.</li>
<li>Анимацию появления выпадающего элемента.</li>
<li>Тень при ховере на элементах управления.</li>
<li>Скругления объектов в дизайне.</li>
<li>Отступы в макете.</li>
</ul>
<ol start="3" type="1">
<li><strong>Если свойства формируются и называются так, чтобы была понятна разница между ними, но при этом не отражается контекст использования, это…</strong></li>
</ol>
<ul>
<li>Сравнительный подход.</li>
</ul>
<ol start="4" type="1">
<li><strong>Если мы сознательно избегаем упоминания в имени свойства его значения, а ориентируемся только на то, как оно используется, это…</strong></li>
</ol>
<ul>
<li>Семантический подход.</li>
</ul>
<ol start="5" type="1">
<li><strong>Верно ли, что сравнительный подход — плохой паттерн, так нельзя делать в дизайн-системах?</strong></li>
</ol>
<ul>
<li>Неверно.</li>
</ul>
<ol start="6" type="1">
<li><strong>Можно ли использовать только сравнительный подход в цветах?</strong></li>
</ol>
<ul>
<li>Иногда можно.</li>
</ul>
</div>
</section>
<section id="лейаут" class="level2" data-number="2.9">
<h2 data-number="2.9">2.8. Лейаут</h2>
<div class="text-container text-container--module">
<p>Лейаут — то, как именно макет делится на прямоугольники. Условимся, что он может делиться вертикально и горизонтально.</p>
<section id="по-вертикали" class="level3" data-number="2.9.1">
<h3 data-number="2.9.1">По вертикали</h3>
<p>Мы знаем, что есть три части страницы — шапка (header), контент (body/content) и подвал (footer).</p>
<figure>
<img src="../media/file76.png" alt="Базовые элементы вертикального лейаута" />
<figcaption aria-hidden="true">Базовые элементы вертикального лейаута</figcaption>
</figure>
<p>В шапке чаще всего находится навигация, могут быть заголовок и какие-то элементы брендинга. Контентная часть наиболее динамична и меняется от страницы к странице. Подвал обычно тоже одинаковый, в нём могут размещать карту сайта, указание на правообладателя материалов, контактную информацию — то есть всё, что может понадобиться, когда пользователь дочитает страницу.</p>
<p>В отдельном проекте может не быть шапки или подвала, но в общем эта конструкция выглядит так.</p>
<p>Вариантов вертикального лейаута может быть огромное множество. Особенно они разнообразны в профессиональных инструментах. Например, сервис Digital Ocean раскладывает панели так:</p>
<figure>
<img src="../media/file77.png" alt="Вертикальный лейаут DigitalOcean" />
<figcaption aria-hidden="true">Вертикальный лейаут DigitalOcean</figcaption>
</figure>
<p>Здесь слева есть зафиксированная по ширине колонка навигации, справа — стандартная конструкция, про которую мы говорили выше, а шапка и подвал занимают всю доступную ширину.</p>
</section>
<section id="по-горизонтали" class="level3" data-number="2.9.2">
<h3 data-number="2.9.2">По горизонтали</h3>
<p>Естественное направление в восприятии, чтении и в вёрстке — сверху вниз. Но в большинстве случаев нам нужно иметь возможность раскладывать элементы не один за другим, а на одном ряду. Как именно это будет сделано, определяет горизонтальный лейаут.</p>
<p>Самый простой и популярный способ — верстать колонками. Параметры горизонтального лейаута в этом случае будут определять количество этих колонок, их ширину и отступы между ними:</p>
<figure>
<img src="../media/file78.png" alt="Разные лейауты с колонками" />
<figcaption aria-hidden="true">Разные лейауты с колонками</figcaption>
</figure>
<p>И здесь кроется одна причина, по которой не стоит пытаться проделать эту работу до того, как появится дизайн нескольких страниц. Представим, что у нас есть две страницы:</p>
<figure>
<img src="../media/file79.png" alt="Три и четыре колонки" />
<figcaption aria-hidden="true">Три и четыре колонки</figcaption>
</figure>
<p>Чтобы выбрать подходящее количество, найдём наименьшее общее кратное для трёх и четырёх, и в итоге будем верстать по двенадцати колонкам. Если бы мы начали определять это только по одной странице, у нас получилась бы конструкция, которую пришлось бы дорабатывать в процессе.</p>
<p>Дробить экраны по горизонтали и вертикали можно разными способами, всё зависит от конкретной задачи:</p>
<figure>
<img src="../media/file80.png" alt="Много разных лейаутов" />
<figcaption aria-hidden="true">Много разных лейаутов</figcaption>
</figure>
<p>Полезно сразу ограничить их количество и дальше придерживаться этих правил. Не стоит увеличивать разнообразие там, где его можно избежать.</p>
</section>
<section id="где-хранить-лейаут" class="level3" data-number="2.9.3">
<h3 data-number="2.9.3">Где хранить лейаут</h3>
<figure>
<img src="../media/file81.png" alt="Документация по лейауту от Ant Design" />
<figcaption aria-hidden="true">Документация по лейауту от <a href="https://ant.design/components/layout/">Ant Design</a></figcaption>
</figure>
<p>В коде лейаут может быть сделан компонентом. В Фигме нельзя задать его глобально на уровне компонентов или переменных, не усложняя при этом жизнь дизайнеру. Поэтому лучший способ — описать его отдельно в руководстве по дизайн-системе. Там же можно описать, как ведёт себя тот или иной шаблон на экранах разных размеров, какие есть брейкпоинты и так далее.</p>
</section>
<section id="посмотрим-на-макет" class="level3" data-number="2.9.4">
<h3 data-number="2.9.4">Посмотрим на макет</h3>
<p>Продолжим разбирать сервис вишлистов. Посмотрим сначала, как он делится по вертикали:</p>
<figure>
<img src="../media/file82.png" alt="Header, content и footer в MiWish" />
<figcaption aria-hidden="true">Header, content и footer в MiWish</figcaption>
</figure>
<p>Сразу отмечаем, что шапка, в отличие от остальных частей макета, тянется на весь экран, а не ограничена шириной контента. Здесь же стоит уточнить у дизайнера, как себя ведёт макет на маленьких экранах, если таких макетов нет. Учитесь это делать сразу.</p>
<p>Посмотрим, сколько колонок нужно, чтобы сверстать контент:</p>
<figure>
<img src="../media/file83.png" alt="Как разбить MyWish по колонкам" />
<figcaption aria-hidden="true">Как разбить MyWish по колонкам</figcaption>
</figure>
<p>Видим, что четырёхколонника для имеющейся системы будет достаточно. При этом работает как на контентную часть, так и на подвал, а вот шапка живёт по отдельным правилам. Её содержимое вытягиваем в строку и прибиваем по краям.</p>
</section>
</div>
</section>
<section id="компоненты-и-элементы-управления" class="level2" data-number="2.10">
<h2 data-number="2.10">2.9. Компоненты и элементы управления</h2>
<div class="text-container text-container--module">
<p>Сначала поговорим про базовые компоненты, не несущие продуктового контекста. Чаще всего это контролы, выпадающее меню, переключатели, поля ввода и всё остальное, что вы можете увидеть в Google по запросу <em>UI Kit</em>.</p>
<section id="унификация-размеров" class="level3" data-number="2.10.1">
<h3 data-number="2.10.1">Унификация размеров</h3>
<p>Унифицировать размеры контролов полезно в самом начале. Управляющие элементы часто собираются в одну линию, нехорошо, если при этом их высота будет «скакать». Их можно выделить в токены, но принимать такое решение стоит аккуратно — в отличие от тех токенов, которые мы уже рассмотрели, размер довольно сильно влияет на конструкцию элемента.</p>
<p>Закладывая подобную гибкость, мы обязательно должны проверять внешний вид элементов в разных масштабах. Иначе есть шанс, что при изменении общего размера что-то непредсказуемо сломается и придётся всё править. Что в целом делает идею с токенами бессмысленной.</p>
<p>Эта работа хорошо проделана в дизайн-системе Consta. Размеры вынесены в отдельную переменную, которая зависит от токенов-спейсеров. Подход позволяет очень быстро менять масштаб и «воздушность» интерфейса.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.Button_size_m</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">--button-height</span>: <span class="fu">var(</span><span class="va">--control-height-m</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">--button-font-size</span>: <span class="fu">var(</span><span class="va">--control-text-size-m</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">--button-space</span>: <span class="fu">var(</span><span class="va">--control-space-m</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="fu">.Theme_control_gpnDefault</span> {</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">--control-height-l</span>: <span class="fu">var(</span><span class="va">--space-4xl</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">--control-height-m</span>: <span class="fu">var(</span><span class="va">--space-3xl</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">--control-height-s</span>: <span class="fu">var(</span><span class="va">--space-2xl</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">--control-height-xs</span>: <span class="fu">var(</span><span class="va">--space-xl</span><span class="fu">)</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
</section>
<section id="выписываем-компоненты" class="level3" data-number="2.10.2">
<h3 data-number="2.10.2">Выписываем компоненты</h3>
<p>Вернёмся к нашему сервису и разберём на нём этот раздел. Для начала выделим два базовых контентных компонента — иконку и текст. Это атомы дизайн-системы, которые будут использоваться везде, от заголовков до подписей под полями.</p>
<p>Затем выделим оставшиеся базовые компоненты в макете и сразу разложим их по размерам.</p>
<figure>
<img src="../media/file84.png" alt="Текст мы уже не выделяем, иначе придётся раскрасить всю страницу" />
<figcaption aria-hidden="true">Текст мы уже не выделяем, иначе придётся раскрасить всю страницу</figcaption>
</figure>
<p>И вынесем на отдельный артборд, сразу разложив их по размерам:</p>
<figure>
<img src="../media/file85.png" alt="Компоненты MyWish, разложенные по размерам" />
<figcaption aria-hidden="true">Компоненты MyWish, разложенные по размерам</figcaption>
</figure>
<p>Мы не будем придумывать сложную систему переменных в размерах, ограничим себе доступные варианты: 56px и 40px. Особняком находятся чекбокс и кнопка-ссылка на соцсети, их вынесем отдельно. Ссылки своего размера не имеют, потому что могут применяться к любому тексту.</p>
</section>
<section id="дополняем-недостающие-варианты" class="level3" data-number="2.10.3">
<h3 data-number="2.10.3">Дополняем недостающие варианты</h3>
<p>Попробуем систематизировать имеющиеся контролы, чтобы увидеть, какие модификации возможны и каких не хватает. Для этого разложим по такому принципу:</p>
<figure>
<img src="../media/file86.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>На пересечениях стало видно недостающие комбинации стилей и внутренней конструкции. Кнопка — базовый элемент управления, поэтому здесь позволим себе пофантазировать и заполнить пробелы:</p>
<figure>
<img src="../media/file87.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Можно придумать любой принцип формирования этой сетки, главное — чтобы в итоге она сама подсказывала, какие пробелы есть в возможных вариациях элемента.</p>
<p>У интерфейсных элементов часто есть набор состояний, чтобы облегчать взаимодействие с пользователем и давать обратную связь о том, что происходит. Какие это могут быть состояния, можно посмотреть на примере Material Design (<a href="https://material.io/design/interaction/states.html#usage">оригинальная английская статья про состояния</a> или <a href="https://designpub.ru/material-design-%D0%BD%D0%B0-%D1%80%D1%83%D1%81%D1%81%D0%BA%D0%BE%D0%BC-%D1%87%D0%B0%D1%81%D1%82%D1%8C-37-%D0%B2%D0%B7%D0%B0%D0%B8%D0%BC%D0%BE%D0%B4%D0%B5%D0%B9%D1%81%D1%82%D0%B2%D0%B8%D0%B5-%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F-151e7f3acaf6">её перевод на русский язык</a>). Сейчас эти состояния остались у нас «за бортом». Можем сделать для этого отдельную таблицу или описать правила рядом на примере базовой кнопки:</p>
<figure>
<img src="../media/file88.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Дополним по тому же принципу все остальные контролы:</p>
<figure>
<img src="../media/file89.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Обратите внимание, что цветов для заблокированных состояний раньше не было. Введём их в палитру:</p>
<figure>
<img src="../media/file90.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Мы разобрали базовые элементы управления страницей (молекулы). Дальше перейдём к контентным блокам.</p>
</section>
</div>
</section>
<section id="блоки-контента" class="level2" data-number="2.11">
<h2 data-number="2.11">2.10. Блоки контента</h2>
<div class="text-container text-container--module">
<p>Перейдём к более контекстозависимым компонентам и крупным кускам интерфейса, которые повторяются из раза в раз. В нашем случае это шапка, подвал и карточки подарков в вишлистах:</p>
<figure>
<img src="../media/file91.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>С шапкой и подвалом всё понятно — они состоят из нескольких базовых компонентов, которые мы разобрали раньше, и не варьируются от страницы к странице. Просто вынесем их на отдельный артборд.</p>
<p>С карточкой интереснее. Давайте разберёмся, какие могут быть варианты:</p>
<figure>
<img src="../media/file92.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Мы видим, что здесь есть ещё один базовый компонент, который мы не выделили на предыдущем шаге — бейдж. Гипотетически он может использоваться в разных контекстах, поэтому вынесем его и доработаем варианты, которые могут понадобиться в ходе сценария (на реальном проекте обсуждайте это с дизайнером):</p>
<figure>
<img src="../media/file93.png" alt="Бейдж может принимать любой цвет и состоит из иконки и текста" />
<figcaption aria-hidden="true">Бейдж может принимать любой цвет и состоит из иконки и текста</figcaption>
</figure>
<p>Разбираем основной компонент-карточку. Он состоит из картинки, заголовочной группы и бейджа (опционально). Сама картинка, если изучить внимательно макет, тоже состоит из двух частей: поверх неё наложен прозрачный затемняющий слой. Мы не контролируем, какой контент будут туда загружать пользователи. При этом, если у картинки изначально был белый фон, она «растворится» на фоне сервиса. Чтобы этого избежать, мы её слегка затемняем:</p>
<figure>
<img src="../media/file94.png" alt="Обычно дизайнеры выносят подобные неочевидные приёмы в комментарии" />
<figcaption aria-hidden="true">Обычно дизайнеры выносят подобные неочевидные приёмы в комментарии</figcaption>
</figure>
<p>Добавим в этот же компонент возможность использовать однострочную заголовочную группу. Так мы предусмотрим случай, когда внутри экрана используется желание, при котором нет смысла указывать категорию подарка.</p>
<p>Готово. Перечислим все крупные блоки:</p>
<figure>
<img src="../media/file95.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
</div>
</section>
<section id="результат" class="level2" data-number="2.12">
<h2 data-number="2.12">2.11. Результат</h2>
<div class="text-container text-container--module">
<p>Мы получили артефакт, показывающий, по каким правилам живёт наш интерфейс. Более общие правила сверху задают рамки, на которые будет ориентироваться команда разработки:</p>
<figure>
<img src="../media/file96.png" alt="Контролы MyWish" />
<figcaption aria-hidden="true">Контролы MyWish</figcaption>
</figure>
<p>Этот артефакт — не строгий набор правил, а помощник при проектировании. Он должен не ограничивать, а подсказать, как можно что-то сделать. Очень скоро элементов в нём окажется недостаточно для решения продуктовых задач, и тогда мы дополним его дополнительными компонентами, токенами и правилами.</p>
<p>Также важно понимать, что сейчас перед нами «концентрат». В зависимости от размера команды, которая будет этим пользоваться, каждый из пунктов можно дополнить описанием, разбить на несколько страниц или файлов, чтобы однозначно передать все нюансы и сделать работу удобной.</p>
</div>
</section>
<section id="задание-2.-выделение-компонентов" class="level2" data-number="2.13">
<h2 data-number="2.13">2.12. Задание 2. Выделение компонентов</h2>
<div class="text-container text-container--module">
<p>Продолжаем работу над учебным проектом сервиса документооборота OneDoc.</p>
<p>Скопируйте файл Фигмы себе в черновики и вынесите на отдельный артборд:</p>
<ol type="1">
<li>Базовые переменные.</li>
<li>Лейаут.</li>
<li>Компоненты и их возможные состояния. Можете не дорабатывать недостающие состояния самостоятельно, но расположите имеющиеся так, чтобы было видно, чего не хватает.</li>
</ol>
<p>После выполнения задания вы сможете сравнить получившийся артборд с вариантом авторов курса.</p>
</div>
</section>
<section id="разбор-выделение-компонентов" class="level2" data-number="2.14">
<h2 data-number="2.14">2.13. Разбор: выделение компонентов</h2>
<div class="text-container text-container--module">
<p>Задание этого модуля не имеет единственно правильного ответа. Мы предлагаем вам одно из возможных решений. Сверьте его со своим и посмотрите различия.</p>
<figure>
<img src="../media/file97.png" alt="Переменные и иконки" />
<figcaption aria-hidden="true">Переменные и иконки</figcaption>
</figure>
<p>Достанем все иконки, которые есть в макетах. Видим, что некоторые из них представлены в двух размерах. Сетка помогает увидеть, каких размеров не хватает, чтобы дополнить в будущем.</p>
<figure>
<img src="../media/file98.png" alt="Шапка, подвал и особенности лейаута" />
<figcaption aria-hidden="true">Шапка, подвал и особенности лейаута</figcaption>
</figure>
<p>В этом проекте есть два принципиально разных лейаута — стандартный вертикальный с тремя частями для страницы-списка и с боковой колонкой для просмотра документа.</p>
<p>У первого лейаута есть ширина контента. У второго боковая колонка имеет фиксированную ширину, нижняя часть зоны контента — фиксированную высоту. Сделаем соответствующие пометки.</p>
<p>Шапка и футер повторяются на всех страницах — забегая вперёд, вынесем их в компоненты.</p>
<figure>
<img src="../media/file99.png" alt="Элементы управления и контентные блоки" />
<figcaption aria-hidden="true">Элементы управления и контентные блоки</figcaption>
</figure>
<p>Дальше выпишем все элементы управления и карточки документов. В этот раз мы не стали дополнять состояния поверх того, что уже было нарисовано, но разложили по сетке, чтобы было понятно, чего не хватает. Сразу заложим возможность менять цвет в рамках акцентной группы у кнопок и сделаем необходимые пояснения.</p>
</div>
</section>
<section id="тест-по-разделу-1" class="level2" data-number="2.15">
<h2 data-number="2.15">2.14. Тест по разделу</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Это сравнительная или семантическая модель?</strong></li>
</ol>
<figure>
<img src="../media/file100.png" alt="Цвета" />
<figcaption aria-hidden="true">Цвета</figcaption>
</figure>
<ul>
<li>Сравнительная.</li>
<li>Семантическая.</li>
</ul>
<ol start="2" type="1">
<li><strong>Это сравнительная или семантическая модель?</strong></li>
</ol>
<figure>
<img src="../media/file101.png" alt="Текст" />
<figcaption aria-hidden="true">Текст</figcaption>
</figure>
<ul>
<li>Сравнительная.</li>
<li>Семантическая.</li>
</ul>
<ol start="3" type="1">
<li><strong>На какие модули традиционно делится страница по вертикали?</strong></li>
</ol>
<ul>
<li>Шапка.</li>
<li>Контент.</li>
<li>Четырёхколонник.</li>
<li>Кнопка отправки формы.</li>
<li>Подвал.</li>
</ul>
<ol start="4" type="1">
<li><strong>Перечислите свойства компонента, которые здесь используются.</strong></li>
</ol>
<figure>
<img src="../media/file102.png" alt="Кнопка" />
<figcaption aria-hidden="true">Кнопка</figcaption>
</figure>
<ul>
<li>Иконка слева.</li>
<li>Иконка справа.</li>
<li>Двойной заголовок.</li>
<li>Только иконка.</li>
<li>Круглые края.</li>
<li>Полная ширина экрана.</li>
<li>По ширине контента.</li>
</ul>
<ol start="5" type="1">
<li><strong>Выносятся ли в дизайн-систему сложные интерфейсные конструкции, которые зависят от продуктового контекста, но повторяются в нескольких местах интерфейса?</strong></li>
</ol>
<ul>
<li>Не выносятся в дизайн-систему.</li>
<li>Выносятся в дизайн-систему.</li>
</ul>
</div>
</section>
<section id="тест-по-разделу-ответы-1" class="level2" data-number="2.16">
<h2 data-number="2.16">2.14. Тест по разделу (Ответы)</h2>
<div class="text-container text-container--module">
<ol type="1">
<li><strong>Это сравнительная или семантическая модель?</strong></li>
</ol>
<figure>
<img src="../media/file100.png" alt="Цвета" />
<figcaption aria-hidden="true">Цвета</figcaption>
</figure>
<ul>
<li>Сравнительная.</li>
</ul>
<ol start="2" type="1">
<li><strong>Это сравнительная или семантическая модель?</strong></li>
</ol>
<figure>
<img src="../media/file101.png" alt="Текст" />
<figcaption aria-hidden="true">Текст</figcaption>
</figure>
<ul>
<li>Семантическая.</li>
</ul>
<ol start="3" type="1">
<li><strong>На какие модули традиционно делится страница по вертикали?</strong></li>
</ol>
<ul>
<li>Шапка.</li>
<li>Контент.</li>
<li>Подвал.</li>
</ul>
<ol start="4" type="1">
<li><strong>Перечислите свойства компонента, которые здесь используются.</strong></li>
</ol>
<figure>
<img src="../media/file102.png" alt="Кнопка" />
<figcaption aria-hidden="true">Кнопка</figcaption>
</figure>
<ul>
<li>Иконка справа.</li>
<li>Двойной заголовок.</li>
<li>Круглые края.</li>
<li>По ширине контента.</li>
</ul>
<ol start="5" type="1">
<li><strong>Выносятся ли в дизайн-систему сложные интерфейсные конструкции, которые зависят от продуктового контекста, но повторяются в нескольких местах интерфейса?</strong></li>
</ol>
<ul>
<li>Выносятся в дизайн-систему.</li>
</ul>
</div>
</section>
</section>
</body>
</html>
